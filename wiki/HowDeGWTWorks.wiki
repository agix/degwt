#summary Technical Information on how the de-obfuscation process works

= How DeGWT Works =

DeGWT is a javascript library that de-obfuscates GWT generated javascript code. In general, the code makes assumptions on how GWT generates code, and then uses them to generate unobfuscated code. This page documents these assumptions.

== Comparing Pretty and Obfuscated Javascript Code ==
GWT can generate javascript code in three styles - Obfuscated (default), Pretty and Detailed. Most of the reverse engineering is done by comparing the Pretty output to the Obfuscated output. Therefore, it is important to understand the pretty output.

In general, the difference between Pretty and Obfuscated javascript are the following -
  # All classes and methods are renamed. Typically, classes and methods have 2 or 3 letter names.
  # All strings are inlined. If pretty js has code like `$addString(streamWriter, 'greetServer')`, in obfuscated mode it will become something like `aG(pQ, rS);`.
  # Here, the method `$addString` and the variable `streamWriter` were renamed, and the String "greetServer" was stored in a variable rS, and then the variable was used instead.

== Identifying GWT Code==
GWT has a bootstrapping and selection script named <module-name>.nocache.js. This is the script that is embedded in the host html. This creates a hidden iframe, sniffs the browser and then loads the javascript _code specific to the browser_ in the hidden iframe. All GWT classes and functions are defined within this hidden Iframe.

GWT generated code always defines some variables - like $gwt_version, $wnd and $doc. The presence of any of these variables indicates that we are dealing with GWT. 

So, to determine if a website is built on GWT, we do the following - 
  # See if $gwt_version is defined in the current window. If yes, $gwt = window
  # Iterate over all Iframes and search for the variable $gwt_version. If found, $gwt = iframe.contentWindow

At the end of this procedure, the global variable $gwt will point to GWTs namespace and will contain the obfuscated code. If $gwt is null, it is safe to assume the website doesn't use GWT.

== Representing Classes in Javascript ==
  # Java Classes are represented as functions in GWT eg. `function Person(){}`
  # The prototype property points to the parent class eg. `_ = Person.prototype = new Object_0;`
  # Every class defines the `getClass$()` method and `typeId$` property.
  # The `Object` class defines the 'equals()`, `toString()` and `hashCode()` method just like in java. If a particular class overrides it, then the corresponding java function will also override it.
  # In Obfuscated mode, `getClass$()` becomes `gC()`, `equals()` becomes `eQ`, `hashCode` becomes 'hC` and `typeId` becomes `tI`.
  # The class names are available by invoking the method `classObj.gC().toString()`.
  # By inspecting the prototype chain, you can figure out the inheritance hierarchy of the class.

== Identifying RPC Methods ==